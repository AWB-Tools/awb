: # -*-Perl-*-
eval 'exec perl -w "$0" ${1+"$@"}'
    if 0;

#
# Copyright (C) 2006 Intel Corporation
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
#


use Asim;
use strict;


# ==== SPEED DEBUG ====
use Time::HiRes qw(gettimeofday);;
my $slechta_debug = 0;
my $script_name = "multi.cfx";
my $speed_num = 0;
sub speed_debug
{
    if (!$slechta_debug) { return; };
    my ($addl) = @_;
    if (!defined $addl) { $addl = ""; };
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my ($seconds, $microseconds) = gettimeofday;
    my $timestr = sprintf "%02d:%02d:%02d.%02d",$hour,$min,$sec,$microseconds/10000;
    print STDERR "$timestr $script_name $speed_num: $addl\n";
    $speed_num++;
}
# =====================

##
## Generate a generic cfg file for a multi-threaded trace.
## Whatever follows the --emit argument is of the form:
## trace1/trace2/.../traceN/name.cfg.
## Look up these trace names in the master Tlist file,
## which the setup script will load into cache using fetch_trace.
##
## Carl Beckmann	7/20/2006
##

speed_debug("begin");

my        $RESOLVER = 'awb-resolver';
chomp( my $SETUP    = `$RESOLVER tools/scripts/bm/tracecache/multi.setup` );
my        $GET_PATH = 'fetch-trace --nofetch';

my $gcfg = Asim::GenCFG->new();

# get name of the test and the trace names, which follows the --emit arg:
die "unknown trace name" if ( $ARGV[0] ne '--emit' );
my @trace_names = split '/', $ARGV[1];
(my $name = $trace_names[$#trace_names]) =~ s/\.cfg$//;
$#trace_names--;


# get the locations of the traces to cache them from
my @trace_paths = ();
foreach my $trace_name ( @trace_names ) {
    #
    # SPEED NOTE: this command is a source of slowness in benchmark setup.  this
    # calls "fetch-trace --nofetch" and takes about half a second.  significant, 
    # but not all that substantial unless aggregated over many benchmarks.
    #
    # NOTE: THIS IS NOT NECESSARY SO COMMENTING OUT
    #
    # speed_debug("calling fetch-trace");
    # chomp ( my $trace_path = `$GET_PATH $trace_name | tail -1` );
    # speed_debug("done calling fetch-trace");
    # $trace_path =~ s/^\s*//;
    # $trace_path =~ s/\s*$//;
    #
    # INSTEAD, JUST DO:
    chomp (my $trace_path = $trace_name);

    die "unknown trace location" if ( $trace_path eq '' );
    push @trace_paths, $trace_path;
}

$gcfg->add(name   => $name,
           tree   => \@trace_names,
           feeder => 'archlib',
           setup  => "$SETUP @trace_paths",
           );

$gcfg->action(@ARGV);

speed_debug("end");
