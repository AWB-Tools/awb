: # -*- perl -*-
eval 'exec perl -w "$0" ${1+"$@"}'
       if 0;

#
# Author: Brian Slechta
# 
# Description: Run with no command line paramters to see description
#

chomp (my $path = `pwd`);

# global constants
my $limitmulti = 99999; # absurdly large
my $nosingle = 0;
my $logfile = "/dev/null";
my $script_name = "create-benchmark-file";
my @params = ( "tag", "tlist", "flist", "outfile", "logfile", "debug", "limitmulti", "nosingle");

# global variables
my %got_param;
my %param_val;

parse_parameters(@ARGV);
check_parameters();

convert();

close INFILE;
close OUTFILE;
close LOGFILE;

exit 0;


sub print_usage;
sub parse_parameters;
sub check_parameters;
sub dprint;
sub oprint;
sub convert;
sub convert_tlist;
sub convert_tag;
sub convert_flist;


#==============================================================================
#==============================================================================
#==============================================================================

sub print_usage
{
    print "\n\tusage:\n\t$script_name -<param1>=<val1> ...\n";

    print "\n\tdescription:\n";
    print "\tthis is just a simple script to create an awb-run benchmark file\n";
    print "\tusing a tlist, a tag, or the output of a previous trace_list command.\n";
    print "\tit will create a benchmarks file (to stdout or specified outfile)\n";
    print "\tusing single.cfx.\n";
    
    print "\n\tparamter options are:\n";
    foreach my $param (@params)
    {
        print "\t$param\n";
    }
    print "\n";

    print "\n\trequirements:\n\t$script_name needs at least 1 input parameter\n";
    
    print "\n\texamples:\n";
    print "\t$script_name -tag=specjbb2k -outfile=out.benchmarks\n";
    print "\t$script_name -tlist=my.tlist\n";
    print "\t$script_name -flist=trace_list_out.txt\n";

    print "\n";
}

sub parse_parameters # (@args)
{
    my (@args) = @_;
    
    if($#args < 0) {
        print_usage();        
        exit 0;
    }

    $num_args = $#args + 1;
    for (my $ii = 0; $ii < $num_args; ++$ii) {
        $arg = shift;
        $found = 0;

        foreach $param (@params) {
            if ($arg =~ /^-$param=(.*)/) {
                $got_param{$param} = 1;
                $param_val{$param} = $1;
                $found = 1;
            }
            elsif ($arg =~ /^-$param$/) {
                $got_param{$param} = 1;
                $found = 1;
            }
        }

        if (!$found) {
            #print LOGFILE "bad parameter = \"$arg\"\n";
            print "bad parameter = \"$arg\"\n";
            print_usage();        
            exit 0;
        }
    }

    foreach $key (keys %got_param) {
        if ($param_val{$key}) {
            #if ($DEBUG) { print LOGFILE "debug: param=$key, val=$param_val{$key}\n"; };
        }
        else {
            #if ($DEBUG) { print LOGFILE "debug: param=$key\n"; };
        }
    }

}

sub check_parameters
{
    # open the infile
    my $in_count = 0;
    if ($got_param{"tag"})
    {
        defined $param_val{"tag"} ||  die;
        if ($got_param{"tag"} =~ /\S+/)
        {
            # there is at least one non space character
        }
        else 
        {
            die;
        }
        ++$in_count;
    }
    elsif ($got_param{"tlist"})
    {
        ++$in_count;
        open (INFILE, "<".$param_val{"tlist"}) || die "$!";
    }
    elsif ($got_param{"flist"})
    {
        ++$in_count;
        open (INFILE, "<".$param_val{"flist"}) || die "$!";
    }

    # make sure we only had one infile
    if ($in_count != 1)
    {
        print "need exactly one of tag, tlist, or flist as input\n";
        print_usage();        
        exit 0;
    }

    # create the file output if it exists
    if ($got_param{"outfile"})
    {
        defined $param_val{"outfile"} || die;
        open OUTFILE, ">".$param_val{"outfile"} || die "$!";
    }

    # create the logfile output
    if ($got_param{"logfile"})
    {
        defined $param_val{"logfile"} || die;
        my $logfile = ">".$param_val{"logfile"};
        open (LOGFILE, $logfile) || die "could not open $logfile for writing: $!";
    }
    else
    {
        my $logfile = ">/dev/null";
        open (LOGFILE, $logfile) || die "could not open $logfile for writing: $!";
    }

    if ($got_param{"limitmulti"})
    {
        $limitmulti = $param_val{"limitmulti"};
    }

    if ($got_param{"nosingle"})
    {
        if (defined $param_val{"nosingle"})
        {
            $nosingle = $param_val{"nosingle"};
        }
        else
        {
            $nosingle = 1;
        }
    }
}

# print the output
sub oprint
{
    if ($got_param{"outfile"})
    {
        defined $param_val{"outfile"} || die;
        print OUTFILE @_;
    }
    else
    {
        print @_;
    }
}

# print the output
sub dprint
{
    if ($got_param{"debug"})
    {
        oprint @_;
    }
}

sub convert
{
    if ($got_param{"tlist"})
    {
        convert_tlist();
    }
    elsif ($got_param{"flist"})
    {
        convert_flist();
    }
    elsif ($got_param{"tag"})
    {
        convert_tag();
    }
}

sub convert_tlist
{
    foreach my $line (<INFILE>)
    {
        chomp $line;

        if ($line =~ /\s*\#/)
        {
            # ignore
        }
        elsif ($line =~ /\s*\/?(\S*)/)
        {
            # there is some non-whitespace.  good.
            oprint "tools/scripts/bm/tracecache/single.cfx/$1.cfg\n";
        }
        else
        {
            # all white space
        }
    }
}

sub convert_tag
{
    my @list = `trace_list $param_val{"tag"}`;

    process_flist(@list);
}

sub convert_flist
{
    my @list = <INFILE>;

    process_flist(@list);
}


sub process_flist # (@flist)
{
    my @flist = @_;

    push @flist, "";

    # OLD my $last_was_ptag = 0;

    my $twolit_begin = 0;
    my $twolit_num = 0;
    my $twolit_name = "";
    my $twolits = {};
    my $attrs = {};
    my $ptag = "";
    my $ctag = "";
    my $tag = "";
    my $print_twolit = 0;

    foreach my $line (@flist)
    {
        chomp $line;

        if ($line =~ /^ptag:(.*)/)
        {
            dprint "ptag->$line\n";

            $ptag = $1;
        }
        elsif ($line =~ /^tag:(.*)/)
        {
            dprint "tag->$line\n";

            $tag = $1;
        }
        elsif ($line =~ /^ctag:(.*)/)
        {
            dprint "ctag->$line\n";

            $ctag = $1;
        }
        elsif ($line =~ /^(.*)=(.*)/)
        {
            my ($key, $val) = ($1, $2);

            $attrs{$key} = $val;
            
            dprint "attr->$key==$attrs{$key}\n";

            if ($key =~ /TWOLIT_TRACE(\d+)$/) 
            {
                my ($num) = ($1);

                $twolits{$num} = $val;

                if ($num eq "0")
                {
                    dprint "twolit_begin\n";
                    if ($twolit_begin) 
                    {
                        dprint "ERROR: twolit_begin without end\n";
                    }
                    $twolit_begin = 1;
                    $twolit_num = 1;
                }
                else
                {
                    $twolit_num++;
                }
            }
        }
        elsif ($line =~ /.*\/(.*)/)
        {
            dprint "single->$line\n";

            # found a single lit
            my ($singletrace) = ($1);

            if ($singletrace =~ /\.tlist/)
            {
                # not trace
            }
            else
            {
                if ($twolit_begin) 
                {
                    dprint "ERROR: twolit_begin with a single trace\n";
                }
                if (!($nosingle))
                {
                    oprint "tools/scripts/bm/tracecache/single.cfx/$singletrace.cfg\n";
                }
            }
        }
        elsif ($line eq "")
        {
            dprint "blank->$line\n";

            dprint "foo->$twolit_begin:$twolit_name\n";

            if (($twolit_begin) && ($twolit_name ne ""))
            {
                # CASE: single twolit trace by itself and after TWOLIT_TRACEn 
                # attributes from previous section.
                # <
                # tag: AllTraces AllTraces_complete FOURLIT FOURLIT_complete ...
                # SIMLEN_complete=0;0;30990293
                # SIMLEN_complete_skip=0;500000;30990293
                # SIMLEN_long=0;0;15000000
                # SIMLEN_long_skip=0;500000;15000000
                # SIMLEN_tiny=0;0;5000000
                # SIMLEN_tiny_skip=0;500000;5000000
                # SIMLEN_variable=0;0;5000000
                # SIMLEN_variable_skip=0;500000;5000000
                # TRACETYPES=LCAT,TWOLIT
                # TWOLIT_TRACE0=/fs61/nhm.arch.traces.25/traces/server/google_v1-t2...
                # TWOLIT_TRACE1=/fs38/nhm.arch.traces.21/traces/server/specweb99ssl...
                # TWOLIT_TRACE2=/fs38/nhm.arch.traces.21/traces/internet/ntttcpr_25...
                # TWOLIT_TRACE3=/fs37/psc.arch.traces.17/traces/server/tpc-c/tpcc_-...
                # 
                # ptag: Unassigned_-_-_Unassigned_-
                # google_v1-t2-s6-large-queries_icc9-0_016^specweb99ssl_007^ntttcpr_256_002^tpcc_071
                #
                # >

                # we likely just got the name of a twolit trace and can now 
                # match it up with exiting twolit traces
                my $name = $twolit_name;
                if ($limitmulti >= $twolit_num)
                {
                    my $combined = "tools/scripts/bm/tracecache/multi.cfx";
                    for (my $i = 0; $i < $twolit_num; $i++)
                    {
                        my $n = $twolits{"$i"};
                        if ($n =~ /.*\/(.*)/) 
                        {
                            $n = $1;
                        }
                        $combined .= "/";
                        $combined .= $n;
                    }
                    $combined .= "/";
                    $combined .= $name;
                    $combined .= ".cfg\n";
                    oprint $combined;
                }
                $twolit_begin = 0;
                $twolit_name = "";
                $twolit_num = 0;
            }
        }
        elsif (!($line =~ /^\s*\#/))
        {
            # this must be a twolit trace name
            dprint "name->$line\n";

            if ($twolit_begin) 
            {
                # CASE: tracename followed by TWOLIT_TRACEn attributes, often 
                # multiple trace names with each ptag.
                # <
                # 
                # ptag: Unassigned_-_-_Unassigned_-
                # google_008^4t
                # SIMLEN_complete=1000000;0;26009782
                # SIMLEN_complete_skip=1000000;500000;26009782
                # TWOLIT_TRACE0=/fs38/nhm.arch.traces.23/traces/server/google_...
                # TWOLIT_TRACE1=/fs38/nhm.arch.traces.23/traces/server/google_...
                # TWOLIT_TRACE2=/fs38/nhm.arch.traces.23/traces/server/google_...
                # TWOLIT_TRACE3=/fs38/nhm.arch.traces.23/traces/server/google_...
                # sas_011^4t
                # >
                
                # we can match this up with the pending twolit names
                my $name = $line;
                if ($limitmulti >= $twolit_num)
                {
                    my $combined = "tools/scripts/bm/tracecache/multi.cfx";
                    for (my $i = 0; $i < $twolit_num; $i++)
                    {
                        my $n = $twolits{"$i"};
                        if ($n =~ /.*\/(.*)/) 
                        {
                            $n = $1;
                        }
                        $combined .= "/";
                        $combined .= $n;
                    }
                    $combined .= "/";
                    $combined .= $name;
                    $combined .= ".cfg\n";
                    oprint $combined;
                }
                $twolit_begin = 0;
                $twolit_name = "";
                $twolit_num = 0;
            }
            else
            {
                # we can match this up with the next set of twolit traces
                $twolit_name = $line;
            }
        }

        # OLD if ($line =~ /^ptag:/)
        # OLD {
        # OLD     $last_was_ptag = 1;
        # OLD }
        # OLD else 
        # OLD {
        # OLD     if ($last_was_ptag)
        # OLD     {
        # OLD         # this line should be a file path
        # OLD         if ($line =~ /\s*\/(.*)/)
        # OLD         {
        # OLD             oprint "tools/scripts/bm/tracecache/single.cfx/$1.cfg\n";
        # OLD         }
        # OLD         else
        # OLD         {
        # OLD             # not a file path!  ignore
        # OLD         }
        # OLD     }
        # OLD 
        # OLD     $last_was_ptag = 0;
        # OLD }
    }

    if (($twolit_begin) || ($twolit_name ne ""))
    {
        dprint "ERROR: end of file: twolit_begin=$twolit_begin, twolit_name=$twolit_name\n";
    }

    return;
}
