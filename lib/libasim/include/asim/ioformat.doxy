/**
@file
@author Artur Klauser
@brief User Documentation for I/O Formatting Objects
@see @ref IoFormat_Documentation "I/O Format Documentation"
@ingroup IoFormat
*/
/**
@defgroup IoFormat I/O Formatting Objects
*/
/**
@page IoFormat_Documentation I/O Format User Documentation
@author Artur Klauser
@ingroup IoFormat

@par Introduction
<b>I/O Formatting Objects</b> provide the type-safety for
output operations that C++ ostreams have introduced, while trying not
to give up on the conciseness of expressing formatting options that
C's printf-style format-strings bring to bear.

@par C++ ostream-style Formatting
Formatting in C++ ostreams is based on the fundamental notion that
the ostream holds state that corresponds to all formatting options.
In order to change the format that is used for output, this state
has to be changed. For this purpose, C++ ostream objects provide
several layers of functionality. At the lowest level, ostream
allows modification of this formatting state with method calls
( ostream::width(), ostream::precision(), ostream::fill(),
ostream::setf(), ostream::unsetf() ). These method calls have to be
performed explicitly on ostream objects, e.g.
@code
  cout.width(10).fill('#').setf(ios_base::right, ios_base::adjustfield)
@endcode
All formatting state other than ostream::width() is persistent with
the ostream object and will be used until it is explicitly changed.
The ostream::width() state only applies to the immediately
following object that is output and automatically reverts back to 0
(no minimum field width) afterwards. Thus, in order to output
successive objects with different formatting, code like the
following is required:
@code
  cout.width(10).fill('#').setf(ios_base::right, ios_base::adjustfield)
  cout << int(123);
  cout.width(5).fill(' ').setf(ios_base::left, ios_base::adjustfield)
  cout << int(456);
@endcode
For a more concise expression of these formatting changes,
@ref IoFormat_Manipulators "manipulators" are defined on ostream
objects. Manipulators can be (syntactically) used in the output
operation itself, e.g.
@code
  cout << setw(10) << setfill('#') << right << int(123)
       << setw(5)  << setfill(' ') <<  left << int(456);
@endcode
Even though this manipulator syntax is a little more concise than
using ostream method calls, it is still rather verbose. It should also
be noted that manipulators still change the state of the output stream
at the point where they are inserted in the output operation and that
these state changes persist, i.e. in the above example, the state of
cout after the output operation is still set to left justified output.
Any following output operation on cout, potentially in a completely
unrelated part of the program, will inherit whatever state cout
happens to be in. This can be problematic since it is hard to make
guarantees on the formatting state of ostream objects at the entry to
any function. The ostream formatting state is like a global variable
that is manipulated in many places.

@par C printf-style Formatting
Output formatting in C programs is accomplished with printf() and
its variants and is based on specifying a <b>formatstring</b> that
describes the output format for each of the following arguments
printf(fmtstr, arg1, arg2, ...). The format is not associated with
the output object (stdout) but only with a specific argument to
printf(). Format specifications are relatively concise compared to
C++ oustream formatting manipulation. In addition, since the output
object (stdout) does not carry any formatting state, no formatting
changes can "leak" from the use of printf() in one function into the
use of printf() in an unrelated function.

@par
On the other hand, printf() style output is inherently <b>not
type-safe</b>. The printf() formatstring does not only specify the
format of each of its arguments, but also specifies the <b>type</b>
of each argument. printf() uses vararg argument passing conventions
and uses the type specification from the formatstring to pop the
correct argument type off the varargs argument stack. A result of this
is that printf() reads the wrong arguments if the type specification
of the argument list in the printf() formatstring does not match the
actual argument list that follows, e.g.
@code
  printf ("%d %s", (char*)foo, (char*)bar);
@endcode
will result in major confusion and potentially an illegal memory
access in printf() since the varargs stack contains two pointers,
whereas printf() tries to read first an int and then a pointer from
the varargs stack. Besides printing the wrong infomation, this can also
lead to misalignment for all arguments following the misspecified
one on the varargs stack (e.g. if sizeof(int) = 4 and sizeof(char*) = 8).

@par I/O Formatting Objects
I/O Formatting Objects try to combine the strengths of the type
safety of C++ ostream-style output, i.e. each object knows how to
print itself, with the conciseness and statelesness of printf-style
formatting specification. At the same time it tries to avoid the
pitfalls of either ostream or printf-style output formatting.
An I/O formatting object (Format for short) pulls out the
formatting state from the ostream and keeps it in a separate
object, a Format object. A programmer can define Format objects
either explicitly in the program or implicitly in an ostream output
statement.
@code
  // explicit
  Format myformat = Format("-15.3f");
  cout << fmt(myformat, 123.456);
  cout << myformat(123.456); // equivalent to above line

  // implicit
  cout << fmt("-15.3f", 123.456);
@endcode
As the example shows, a Format object can be initialized with a
printf-like @ref fmtstr. However, other than with printf(), the
@ref fmtstr is only used to specify formatting options, <b>not</b>
to specify the data type of the argument. A Format object can also
be reset to a new format at a later time with code like
@code
  myformat.format("10X");
@endcode

@par
Format objects define the same low-level formating methods as
ostream objects do ( Format::width(), Format::precision(),
Format::fill(), Format::setf(), Format::unsetf() ). In addition,
Format objects can be reinitialized with a printf-like @ref fmtstr
specification with the Format::format() method. Format objects also
define two additional methods Format::prefix() and
Format::postfix() to define prefix and postfix strings to be
printed whenever a value is printed with this Format. As a shortcut,
prefix and postfix strings can also be given to the Format
constructor.
@code
  Format myformat = Format("Addr = ", "10x", ".hex");
  cout << myformat(0x123456);
  // output is: "Addr =     123456.hex"
@endcode
Possible uses of the Format constructor are
@code
  Format f1; // all defaults (brief)
  Format f2 = Format(); // same as above (verbose)
  // both brief and verbose constructor syntax can also be used with
  // all of the constructors below (only verbose is shown)
  Format f3 = Format("-15.3f"); // constructor with fmtstr
  Format f4 = Format("myprefix", "-15.3f"); // prefix and fmtstr
  // prefix, fmtstr, and postfix
  Format f5 = Format("myprefix", "-15.3f", "mypostfix);
@endcode
In addition to these constructors, Format objects also have a copy
constructor. (Note that copy constructors are not available on ostream
objects!)
@code
  Format f1 = Format("-15.3f");
  Format f2 = f1;
  f2.setfill('*');
@endcode
In the above example, f2 inherits its format from f1 and in addition
will use '*' as a fill character.

@anchor IoFormat_Manipulators
@par Manipulators
Format objects support the same set of standard manipulators that are
supported on ostream objects.  Manipulators are used to declare the
"inline" operations in an ostream or Format with the syntax
@code
  Format myformat;
  myformat << boolalpha << left;
@endcode
Manipulators come in two flavors, those that do not require
arguments and those that do require arguments. Manipulators w/o
arguments use the syntax shown above. Note that there is
<b>no</b> pair of parentheses () after the manipulator name.
The following set of standard argumentless manipulators is
supported on Format objects. Defaults are indicated by *.
<pre>
------------------------------------------------------------
basic
manipulator  description
------------------------------------------------------------
boolalpha    symbolic representation of false/true for bool values
noboolalpha  * numeric representation 0/1 for bool values
showbase     prefix octal by 0, hex by 0x or 0X
noshowbase   * don't prefix integers by number base indicator
showpoint    always show dot and trailing zeros for float
noshowpoint  * show dot and trailing zeros for float when needed
showpos      explicit + sign for positive integers
noshowpos    * don't show + sign for positive integers
skipws       * skip white space in input (defunct for output)
noskipws     don't skip white space in input (defunct for output)
uppercase    X and E for hex and power of 10 indicators
nouppercase  * x and e for hex and power of 10 indicators
unitbuf      flush output after each output operation (defunct)
nounitbuf    * don't flush output after operation (defunct)
------------------------------------------------------------
adjustfield
manipulator  description
------------------------------------------------------------
internal     fill character between sign and value
left         flush left (fill character right)
right        * flush right (fill character left)
------------------------------------------------------------
basefield
manipulator  description
------------------------------------------------------------
dec          * decimal integer representation
hex          hexadecimal integer representation
oct          octal integer representation
------------------------------------------------------------
floatfield
manipulator  description
------------------------------------------------------------
fixed        fixed floating point representation
scientific   scientific floating point representation
------------------------------------------------------------
</pre>

@par
The second form of manipulators does take arguments. The syntax
for those is
@code
  Format myformat;
  myformat << setwidth(12) << setfill('#');
@endcode
Note, since there is a name clash e.g. between std::setwidth(int)
and IoFormat::setwidth(int) we also define alternate manipulator
names that do not have name clashes with namespace std (at least
in g++ std lib V3).
The following set of standard manipulators w/ arguments is
supported on Format objects:
<pre>
------------------------------------------------------------
standard name    alternate name  description
------------------------------------------------------------
resetiosflags()  resetflags()    reset (&~) format flags
setiosflags()    setflags()      set (|) format flags
setbase()        base()          set number base to 8,10,16
setfill()        fill()          set fill character
setprecision()   precision()     set float precision
setw()           width()         set minimum field width
------------------------------------------------------------
</pre>

@par
Rather than using the alternate names, you can also fully qualify
the standard names to resolve possible name clashes with std::, e.g.
@code
  Format myformat;
  myformat << width(12);
  myformat << IoFormat::setw(12); // equivalent to above
  myformat << setw(12);  // compile time error - ambiguous setw(int)
@endcode

@par
The following manipulators are not derived from the standard
manipulators available for ostream objects but are specific
to Format objects:
<pre>
------------------------------------------------------------
primary name     alternate name  description
------------------------------------------------------------
setprefix()      prefix()        set prefix string
setpostfix()     postfix()       set postfix string
setformat()      format()        init format from @ref fmtstr
------------------------------------------------------------
</pre>

@par Implicit Format Creation
To avoid having to explicitly create a Format that is used only once
in an output operation, implicit Format operations can be used.
Implicit Format operations use the following syntax:
@code
  cout << fmt("-15.3f", 123.456);
  // equivalent to the explicit use
  Format f1("-15.3f");
  cout << f1(123.456);
@endcode
The fmt() syntax has the combined functionality of a Format
constructor and a Format use. In fact, internally a temporary Format
object is constructed. For performance reasons you should use explicit
Format objects if you reuse the same format multiple times, rather
than specifying the same @ref fmtstr in multiple implicit uses in the
same ostream output statement.

@par
Implicit use also supports prefix and postfix strings. The
following syntax options are available:
@code
  cout << fmt("15.3f", 123.456);            // only fmtstr
  cout << fmt("prefix", "15.3f", 123.456);  // prefix and fmtstr
  cout << fmt("15.3f", 123.456, "postfix"); // fmtstr and postfix
  // prefix, fmtstr, and postfix
  cout << fmt("prefix", "15.3f", 123.456, "postfix");
@endcode
As an alternative to using a @ref fmtstr in the fmt() syntax, you can
also use an explicit Format:
@code
  // implicit use
  cout << fmt("15.3f", 123.456);
  // equivalent to
  Format f1("15.3f");
  cout << fmt(f1, 123.456);
  // which is really implemented as
  cout << f1(123.456)
  // so there is no additional overhead of creating a temporary Format
@endcode
This last syntax variant is only supported for orthogonality and does
not add any additional functionality. Note that in this case both the
explicit Format and the implicit fmt() function can define prefix and
postfix strings. The semantics of this situation is resolved such that
prefix or postfix strings given to the fmt() function will override
prefix and postfix strings of the explicit Format object used in the
fmt() function.
*/

// -- the following would be nice, but I don't want it in the
// -- documentation for now;
// @todo Subclass Format w/ prefix/postfix capabilities from a
// lighter-weight Format that does not support this. That way we would
// not have to pay for the overhead if we don't need it.
