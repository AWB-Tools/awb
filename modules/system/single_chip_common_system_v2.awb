******************************************************************
Awb module specification
******************************************************************


%AWB_START

%name Single Chip System Version 2
%desc Single Chip System with DRAL API as a separate module
%attributes single_chip
%provides system

/* NOTE: dral_api has to go before the context scheduler so that the libdral.a
   include is ahead of the libsupport.a from the x86 packages.  this only
   matters with certain dral_api and certain context_schedulers (ie. x86). */
%requires dral_api packages basesystem warmup_manager context_scheduler isa chip power_model
%public single_chip_common_system.h
%private single_chip_common_system.cpp

%library lib/libasim/libasim.a

%export MAX_TOTAL_NUM_CPUS          128 "Maximum number of CPUS allowed"
%export MAX_TOTAL_NUM_HWCS          128 "Maximum number of hardware contexts allowed"

%const MAX_PTHREADS                  1 "Maximum number of simulator threads"
%const %dynamic LIMIT_PTHREADS       0 "Dynamic maximum simulator threads (0 == use MAX_PTHREADS)"

%const PTHREAD_PER_BOARD 0 "Are board models run in parallel?"
%const PTHREAD_PER_SOCKET 0 "Are socket models run in parallel?"
%const PTHREAD_PER_SLICE 0 "Are core+uncore slice models run in parallel?"
%const PTHREAD_PER_CORE 0 "Are core models run in parallel?"
%const PTHREAD_PER_UNIT 0 "Are unit models run in parallel?"
%const PTHREAD_PER_MODULE 0 "Are all modules run in parallel?"
%const CORES_PER_PTHREAD 1 "How many core models are run on one pthread? (Range is 1 to max num of cores)"

%const THREADED_CLOCKING 0 "Enables the threaded clocking"
%const RANDOM_CLOCKING_SEED 0 "Seed to clock modules in random order (0 == Fixed order)"
%const DUMP_CLOCKING_PROFILE 0 "Enables the Clock routine profiling"

%param %dynamic SIMULATED_REGION_INSTRS_REPRESENTED 0 "Total instructions per CPU in benchmark represented by this region"

%AWB_END
